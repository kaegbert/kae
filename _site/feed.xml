<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kevin egbert</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 25 Jun 2017 21:14:31 -0400</pubDate>
    <lastBuildDate>Sun, 25 Jun 2017 21:14:31 -0400</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>water-infrastructure</title>
        <description>&lt;p&gt;&lt;em&gt;Water Infrastructure Research and Questions&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After visiting and documenting locations on campus related to Purchase’s water supply, Kim and I looked at a proposal that details information surrounding the Senior Housing on the campus. The proposal outlines water supply, sewer, and stormwater management systems.&lt;/p&gt;

&lt;p&gt;In regards to the water supply, Purchase’s supply is provided by Westchester Joint Water Works who obtains water from Catskill and Delaware watersheds of New York City and also from Rye lake. The Waterworks is in negotiations with Westchester County about construction of a new water treatment plant in which it is not know if it impact college tuition rates. There is over 200,000 gallons of water used per day and hydrant flow tests indicate that there is sufficient fire flow except for the furthest ends of water main system.&lt;/p&gt;

&lt;p&gt;Sewer service is owned and maintained by SUNY and the system is connected to a sewer that lies along the eastern boundary of the campus near Blind Brook. There is estimated 113,000 gallons of sewage per day that flows from the sewage system.&lt;/p&gt;

&lt;p&gt;The stormwater system is in the southwestern area of campus. The site drains to tributaries of Blind Brook which flows through Rye and Harrison to Milton Harbor.&lt;/p&gt;

&lt;p&gt;After reading through the proposal I reached out to a former New Media student, Danny Fabricant, who worked on a storm drain sensor system in Steve Lambert’s Special Project in Tiny Computing class. Danny worked with Professor Ryan Taylor to create a system using Raspberry Pi to measure storm drain water levels. I reached out to Danny who detailed information as to a pond marked with orange plastic ties that leads to a pond where the project takes place. I have since then reached out to Ryan Taylor in hopes of gaining more information about the stormwater system.&lt;/p&gt;

&lt;p&gt;“https://www.purchase.edu/sharedmedia/purchasing/development-consultant-rfp-10-03-2013-final-with-attachments.pdf”&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Sep 2016 02:34:25 -0400</pubDate>
        <link>http://localhost:4000/water-infrastructure</link>
        <guid isPermaLink="true">http://localhost:4000/water-infrastructure</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>pi / arduino / pD audio effects processor</title>
        <description>&lt;iframe src=&quot;https://player.vimeo.com/video/149586351&quot; width=&quot;640&quot; height=&quot;400&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This project uses Raspberry Pi, Arduino, and PureData to create a digital multi-fx &quot;pedal&quot; to process sound in real time. The tutorial covers setup with the pi to both PureData and Arduino.&lt;/p&gt;

&lt;p&gt;The end goal is to use PureData (a visual programming language developed for creating multimedia works) to manipulate audio in real time with the help of a usb audio interface. PureData can be easily installed on a Pi and through some setup, an Arduino can be used to control parameters in the PureData patch.&lt;/p&gt;

&lt;p&gt;The main focus of this tutorial is to share my path in integrating PD to run “headlessly” on the Raspberry Pi. Despite a more extensive setup with the pi, the lack of computer peripherals and components opens up many opportunities in creating interactive systems.&lt;/p&gt;

&lt;p&gt;In this post I will jump right into using a USB audio interface with the pi and move into configuring it with pureData. If you still need to setup your pi, you can check out my extensive posts below.&lt;/p&gt;

&lt;h2&gt;pDuino&lt;/h2&gt;
&lt;p&gt;pDuino is an object created by Hans Christoph Steiner. It handles communication between Arduino microcontrollers and the PureData software. This is important to us because it allows us to integrate electronic components like knobs and switches that can change parameters in our Pd patch. This is what allows us to construct a physical device that can control our patch dynamically.&lt;/p&gt;

&lt;p&gt;The first thing to do is to visit:
http://at.or.at/hans/pd/objects.html&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Download the pDuino object and Firmata firmware.
Firmata is what will be loaded onto the Arduino and allows PureData complete control in terms of turning on digital and analog inputs on the Arduino board.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Extract the pDuino archive to a known location on your computer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a path in PureData to the archive location so that PureData can reference it and create arduino objects.
This is done by going to preferences – path – new. You should browse to the folder and apply the changes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;More documentation here: http://en.flossmanuals.net/pure-data/ch060_installing-pduino/&lt;/p&gt;

&lt;h2&gt;Using a USB Audio Interface with Rasberry Pi and PureData&lt;/h2&gt;

&lt;p&gt;Setting up a USB Audio Interface with the pi and using alsamixer to record/play audio from command line.&lt;/p&gt;

&lt;p&gt;Some USB interfaces are compatible with the pi. In my case I am using an Audiobox USB.&lt;/p&gt;

&lt;p&gt;Using alsamixer will allow you to select your sound card instead of the default hdmi.
to record a file called “rectest” into the current directory…​arecord -D plughw:0 –duration=10 -f cd -vv ~/rectest.wav​&lt;/p&gt;

&lt;p&gt;to play it back (using the soundcards output)…
aplay -D plughw:0 ~/rectest.wav&lt;/p&gt;

&lt;p&gt;​The 0 after plughw: refers to my interface. It was listed as 0 as you can see here…&lt;/p&gt;

&lt;p&gt;alsa&lt;/p&gt;

&lt;p&gt;Installing and Configuring PureData with the pi.&lt;/p&gt;

&lt;p&gt;Whether sharing internet from ethernet or just plugging right in to your router, install PureData. Note: This will only install PD-Vanilla. To use the Arduino controller we will have to install other packages. This will be discussed later…&lt;/p&gt;

&lt;p&gt;sudo apt-get install puredata&lt;/p&gt;

&lt;p&gt;vnc&lt;/p&gt;

&lt;p&gt;You can see in the image above that I am VNCed into my pi and accessing PureData through the gui. Once PD is done installing it will be listed under the sound and video menu on the pi.&lt;/p&gt;

&lt;p&gt;Navigate to preferences in PD and make sure your usb interface is selected as audio input/output.&lt;/p&gt;

&lt;p&gt;pd_audio_settings&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Running PD “headless” on the pi&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In order to get patches running on the pi with no need for monitor/keyboard/mouse there are two things that must be accomplished. The first thing is that you need to create a script that tells the pi to open the Pd patch on start up and the second is handled in the Pd patch itself.&lt;/p&gt;

&lt;p&gt;Cron jobs are perfect for having Pd patches run at startup.&lt;/p&gt;

&lt;p&gt;Once that is complete, you need to add the following string into PD.&lt;/p&gt;

&lt;p&gt;This will delay the patch from loading immediately which is required in order for it to run properly on startup.&lt;/p&gt;

&lt;p&gt;One other tip…&lt;/p&gt;

&lt;p&gt;this is what the post that helped me looked like…&lt;/p&gt;

&lt;p&gt;[loadbang]
|
[delay 100]
|
[; pd dsp 1(&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Dec 2015 01:34:25 -0500</pubDate>
        <link>http://localhost:4000/pi-arduino-audio-processor</link>
        <guid isPermaLink="true">http://localhost:4000/pi-arduino-audio-processor</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
